name: FastAPI Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt

    - name: Lint with flake8
      run: |
        flake8 app/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 app/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Format check with black
      run: |
        black --check app/ tests/

    - name: Import sorting check with isort
      run: |
        isort --check-only app/ tests/

    - name: Type check with mypy
      run: |
        mypy app/ --ignore-missing-imports

    - name: Run unit tests
      run: |
        pytest tests/ -m unit --cov=app --cov-report=xml --cov-report=html --junitxml=junit/test-results.xml

    - name: Run integration tests
      run: |
        pytest tests/ -m integration --cov=app --cov-report=xml --cov-report=html --junitxml=junit/integration-results.xml

    - name: Run all tests with coverage
      run: |
        pytest tests/ --cov=app --cov-report=xml --cov-report=html --cov-fail-under=80 --junitxml=junit/all-results.xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          junit/
          htmlcov/
          coverage.xml

  performance:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt

    - name: Run performance tests
      run: |
        pytest tests/ -m slow --benchmark-only --benchmark-save=performance

    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: .benchmarks/

  security:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install safety bandit

    - name: Security check with safety
      run: |
        safety check --json --output safety-report.json || true

    - name: Security check with bandit
      run: |
        bandit -r app/ -f json -o bandit-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json

  docker-test:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build Docker image
      run: |
        docker build -t fastapi-app:test .

    - name: Run tests in Docker
      run: |
        docker run --rm fastapi-app:test pytest tests/ --cov=app --cov-report=xml

  notification:
    runs-on: ubuntu-latest
    needs: [test, performance, security, docker-test]
    if: always()

    steps:
    - name: Notify on success
      if: ${{ needs.test.result == 'success' && needs.performance.result == 'success' && needs.security.result == 'success' && needs.docker-test.result == 'success' }}
      run: |
        echo "All tests passed successfully!"

    - name: Notify on failure
      if: ${{ needs.test.result == 'failure' || needs.performance.result == 'failure' || needs.security.result == 'failure' || needs.docker-test.result == 'failure' }}
      run: |
        echo "Some tests failed. Please check the logs."
